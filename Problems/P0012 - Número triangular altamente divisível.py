# -*- coding: utf-8 -*-
"""
Created on Tue Mar  9 15:25:21 2021

@author: ALEX BACK

HIGHLY DIVISIBLE TRIANGULAR NUMBER

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred 
divisors?

"""
# IMPORTING
from datetime import datetime as date

# FUNCTIONS
def nextTriangular(series) :
    return series[-1] + len(series) + 1

def nextPrime(n, primos):
    if n % 2 == 0: 
        n +=1
    isPrime = False
    while not isPrime:
        for primo in primos:
            if n % primo == 0:
                n +=2
                break
            if primo == primos[-1]:
                isPrime = not isPrime
    return n


def firstPrimeFactor(n):
    primos = [2]
    fatores = []
    if n == 1 : 
        return 1        
    while n > 1:
        if n % primos[-1] == 0: 
            n = n / primos[-1]
            fatores.append(primos[-1])
            break
        else: 
            primos.append(nextPrime(primos[-1], primos))
    return fatores[0]

def listFactors(n):
    factors = [1]
    if n % 2 == 0: 
        prime = 2
        step = 1
    else : 
        prime = firstPrimeFactor(n)
        step = 2
    for i in range(prime ,1+n//prime, step):
        if n % i == 0: 
            factors.append(i)
    factors.append(n)
    return factors

# INPUTS
triangulars = [1]
target = 500 # qty. divisors
maxDivisors = len(listFactors(triangulars[-1]))
start = date.now()
control = target / 10
actualTriangular = triangulars[-1]
print("INICIANDO BUSCA DO PRIMEIRO NUMERO TRIANGULAR COM MAIS QUE", target, "DIVISORES")

# PROCESSING
while maxDivisors <= target : 
    triangulars.append(nextTriangular(triangulars))
    actualSize = len(listFactors(triangulars[-1]))
    if actualSize > maxDivisors : 
        maxDivisors = actualSize 
    #CONTROLLING
    if actualSize >= control : 
        control += target / 10
        print("O", len(triangulars), "º número triangular,", triangulars[-1], ", possui", actualSize, "divisores. Em", date.now() - start)

# OUTPUTS
print("")
factors = listFactors(triangulars[-1])
print("ENCONTROU O", len(triangulars), "º NÚMERO TRIANGULAR:", triangulars[-1])
if len(factors) > 10 : 
    print("Seus primeiros 10 divisores são:")
    print(factors[:10])
    print("Seus últimos 10 divisores são:")
    print(factors[-10:])
else : 
    print("Os fatores de", triangulars[-1], "são:")
    print(factors)
print("")
print("TEMPO TOTAL DA BUSCA:", date.now() - start)